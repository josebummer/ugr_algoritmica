{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Consolas;}}
{\colortbl\red0\green0\blue0;\red255\green0\blue0;\red128\green0\blue128;}
{\info{\comment Generated by the SynEdit RTF exporter}
{\title MezclarVectores.rtf}}

\deflang1033\pard\plain\f0\fs20 \cf0 vector\cf1\b <\cf0 int\cf1 >\b0\cf0  mezclarVectores\cf1\b (\cf0 const\b0  vector\cf1\b <\cf0 int\cf1 >\b0\cf0  \cf1\b &\b0\cf0 arreglo1 \cf1\b ,\b0\cf0  \b const\b0  vector\cf1\b <\cf0 int\cf1 >\b0\cf0  \cf1\b &\b0\cf0 arreglo2\cf1\b )\{
\par \b0\cf0   \b int\b0  x1\cf1\b =\b0\cf2 0\cf1\b ,\b0\cf0  x2\cf1\b =\b0\cf2 0\cf1\b ;
\par \b0\cf0   vector\cf1\b <\cf0 int\cf1 >\b0\cf0  arreglo3\cf1\b ;
\par 
\par \b0\cf0   \b while\b0  \cf1\b (\b0\cf0 x1\cf1\b <\b0\cf0 arreglo1\cf1\b .\b0\cf0 size\cf1\b ()\b0\cf0  \cf1\b &&\b0\cf0  x2\cf1\b <\b0\cf0 arreglo2\cf1\b .\b0\cf0 size\cf1\b ())\b0\cf0  \cf1\b \{
\par \b0\cf0       \b if\b0  \cf1\b (\b0\cf0 arreglo1\cf1\b [\b0\cf0 x1\cf1\b ]<\b0\cf0 arreglo2\cf1\b [\b0\cf0 x2\cf1\b ])\b0\cf0  \cf1\b \{
\par \b0\cf0           arreglo3\cf1\b .\b0\cf0 push_back\cf1\b (\b0\cf0 arreglo1\cf1\b [\b0\cf0 x1\cf1\b ]);
\par \b0\cf0           x1\cf1\b ++;
\par \b0\cf0       \cf1\b \}
\par \b0\cf0       \b else\b0  \b if\cf1 (\b0\cf0  arreglo1\cf1\b [\b0\cf0 x1\cf1\b ]>\b0\cf0 arreglo2\cf1\b [\b0\cf0 x2\cf1\b ]\b0\cf0  \cf1\b )\b0\cf0  \cf1\b \{
\par \b0\cf0           arreglo3\cf1\b .\b0\cf0 push_back\cf1\b (\b0\cf0 arreglo2\cf1\b [\b0\cf0 x2\cf1\b ]);
\par \b0\cf0           x2\cf1\b ++;
\par \b0\cf0       \cf1\b \}
\par \b0\cf0       \b else\cf1 \{
\par \b0\cf0         arreglo3\cf1\b .\b0\cf0 push_back\cf1\b (\b0\cf0 arreglo1\cf1\b [\b0\cf0 x1\cf1\b ]);
\par \b0\cf0         x1\cf1\b ++;
\par \b0\cf0         x2\cf1\b ++;
\par \b0\cf0       \cf1\b \}
\par \b0\cf0   \cf1\b \}
\par \b0\cf0   \b while\b0  \cf1\b (\b0\cf0 x1\cf1\b <\b0\cf0 arreglo1\cf1\b .\b0\cf0 size\cf1\b ())\b0\cf0  \cf1\b \{
\par \b0\cf0       arreglo3\cf1\b .\b0\cf0 push_back\cf1\b (\b0\cf0 arreglo1\cf1\b [\b0\cf0 x1\cf1\b ]);
\par \b0\cf0       x1\cf1\b ++;
\par \b0\cf0   \cf1\b \}
\par \b0\cf0   \b while\b0  \cf1\b (\b0\cf0 x2\cf1\b <\b0\cf0 arreglo2\cf1\b .\b0\cf0 size\cf1\b ())\b0\cf0  \cf1\b \{
\par \b0\cf0       arreglo3\cf1\b .\b0\cf0 push_back\cf1\b (\b0\cf0 arreglo2\cf1\b [\b0\cf0 x2\cf1\b ]);
\par \b0\cf0       x2\cf1\b ++;
\par \b0\cf0   \cf1\b \}
\par \b0\cf0   \b return\b0  arreglo3\cf1\b ;
\par \}
\par }