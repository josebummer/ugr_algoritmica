{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Consolas;}}
{\colortbl\red0\green0\blue0;\red255\green0\blue0;\red0\green120\blue215;\red128\green0\blue128;}
{\info{\comment Generated by the SynEdit RTF exporter}
{\title ejercicio2-funcion.rtf}}

\deflang1033\pard\plain\f0\fs20 \cf0 list\cf1\b <\cf0 int\cf1 >\b0\cf0  visitas_proveedor_greedy\cf1\b (\b0\cf0  \b const\b0  list\cf1\b <\cf0 int\cf1 >\b0\cf0  \cf1\b &\b0\cf0 tienda_abierta\cf1\b ,\b0\cf0  \b int\b0  dias_que_aguanto\cf1\b ,\b0\cf0  \b int\b0  dias_totales \cf1\b )\{
\par \b0\cf0   \cf2\i // Éste método devuelve una lista de enteros que corresponden a los números de día que el granjero tiene que comprar fertilizante
\par \i0\cf0   \cf2\i // El algoritmo empieza desde el primer día que abre la tienda. (tienda_abierta contiene el 0)
\par 
\par \i0\cf0   \cf2\i // tienda_abierta es una lista de enteros que corresponden a los números de día que la tienda abre.
\par \i0\cf0   \cf2\i // dias_que_aguanto es un entero que corresponde con el número de días que el granjero aguanta sin fertilizante
\par \i0\cf0   \cf2\i // días totales es el número total de días para el que cual se quiere programar las visitas_proveedor_greedy
\par 
\par \i0\cf0   \cf2\i // False significa que ese día la tienda no abre. True que sí lo hace.
\par 
\par \i0\cf0   \cf2\i // Primero inicializamos a false todos los días
\par \i0\cf0   vector\cf1\b <\cf0 bool\cf1 >\b0\cf0  dias\cf1\b ;
\par \b0\cf0   \b for\cf1 (\b0\cf0  \b int\b0  i \cf1\b =\b0\cf0  \cf3 0\cf1\b ;\b0\cf0  i \cf1\b <\b0\cf0  dias_totales\cf1\b ;\b0\cf0  i\cf1\b ++\b0\cf0  \cf1\b )\{
\par \b0\cf0     dias\cf1\b .\b0\cf0 push_back\cf1\b (\cf0 false\cf1 );
\par \b0\cf0   \cf1\b \}
\par 
\par \b0\cf0   \cf2\i // Ponemos como true los días que la tienda sí abre.
\par \i0\cf0   \cf2\i // Se presupone que la distancia entre los elementos true es menor o igual a dias_que_aguanto
\par \i0\cf0   \b for\cf1 (\b0\cf0  list\cf1\b <\cf0 int\cf1 >::\b0\cf0 const_iterator it \cf1\b =\b0\cf0  tienda_abierta\cf1\b .\b0\cf0 begin\cf1\b ();\b0\cf0  it \cf1\b !=\b0\cf0  tienda_abierta\cf1\b .\b0\cf0 end\cf1\b ();\b0\cf0  \cf1\b ++\b0\cf0 it \cf1\b )\{
\par \b0\cf0     dias\cf1\b [*\b0\cf0 it\cf1\b ]\b0\cf0  \cf1\b =\b0\cf0  \b true\cf1 ;
\par \b0\cf0   \cf1\b \}
\par 
\par \b0\cf0   \cf2\i // Solucionamos el problema mediante un algoritmo greedy
\par \i0\cf0   list\cf1\b <\cf0 int\cf1 >\b0\cf0  solucion\cf1\b ;
\par \b0\cf0   \b bool\b0  fin \cf1\b =\b0\cf0  \b false\cf1 ;
\par \b0\cf0   \b int\b0  i \cf1\b =\b0\cf0  \cf3 0\cf1\b ;
\par \b0\cf0   \b int\b0  j\cf1\b ;
\par \b0\cf0   \b int\b0  dia_sol\cf1\b ;
\par \b0\cf0   solucion\cf1\b .\b0\cf0 push_back\cf1\b (\b0\cf0 i\cf1\b );
\par 
\par \b0\cf0   \b while\cf1 (\b0\cf0  \cf1\b !\b0\cf0 fin \cf1\b )\{
\par 
\par \b0\cf0     \b for\cf1 (\b0\cf0  j \cf1\b =\b0\cf0  i\cf1\b +\b0\cf3 1\cf1\b ;\b0\cf0  j \cf1\b <=\b0\cf0  dias_que_aguanto\cf1\b +\b0\cf0 i \cf1\b &&\b0\cf0  j \cf1\b <\b0\cf0  dias_totales\cf1\b ;\b0\cf0  j\cf1\b ++\b0\cf0  \cf1\b )\{
\par \b0\cf0       \b if\cf1 (\b0\cf0  dias\cf1\b [\b0\cf0 j\cf1\b ]\b0\cf0  \cf1\b ==\b0\cf0  \b true\b0  \cf1\b )\b0\cf0  dia_sol \cf1\b =\b0\cf0  j\cf1\b ;
\par \b0\cf0       \b if\cf1 (\b0\cf0  j \cf1\b ==\b0\cf0  dias_totales\cf1\b -\b0\cf3 1\cf0  \cf1\b )\b0\cf0  fin \cf1\b =\b0\cf0  \b true\cf1 ;
\par \b0\cf0     \cf1\b \}
\par 
\par \b0\cf0     i \cf1\b =\b0\cf0  dia_sol\cf1\b ;
\par \b0\cf0     solucion\cf1\b .\b0\cf0 push_back\cf1\b (\b0\cf0 dia_sol\cf1\b );
\par \b0\cf0   \cf1\b \}
\par 
\par \b0\cf0   \b return\b0  solucion\cf1\b ;
\par \}
\par }