{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Consolas;}}
{\colortbl\red0\green0\blue0;\red255\green0\blue0;\red128\green0\blue128;}
{\info{\comment Generated by the SynEdit RTF exporter}
{\title RecubrimientoMinimalArbol.rtf}}

\deflang1033\pard\plain\f0\fs20 \cf0 	\b while\cf1 (\b0\cf0 candidatos\cf1\b .\b0\cf0 begin\cf1\b ()->\b0\cf0 getPadre\cf1\b ()\b0\cf0  \cf1\b !=\b0\cf0  \cf2 0\cf0  \cf1\b &&\b0\cf0  \cf1\b !\b0\cf0 candidatos\cf1\b .\b0\cf0 empty\cf1\b ())\{
\par \b0\cf0     solucion\cf1\b .\b0\cf0 insert\cf1\b (\b0\cf0 candidatos\cf1\b .\b0\cf0 begin\cf1\b ()->\b0\cf0 getPadre\cf1\b ()->\b0\cf0 getValor\cf1\b ());
\par \b0\cf0     \b if\cf1 (\b0\cf0  candidatos\cf1\b .\b0\cf0 begin\cf1\b ()->\b0\cf0 getPadre\cf1\b ()->\b0\cf0 getHijos\cf1\b ()\b0\cf0  \cf1\b <=\b0\cf0  \cf2 1\cf0  \cf1\b )\{
\par \b0\cf0       \b bool\b0  salir \cf1\b =\b0\cf0  \b false\cf1 ;
\par \b0\cf0       \b for\cf1 (\b0\cf0  \b auto\b0  it \cf1\b =\b0\cf0  candidatos\cf1\b .\b0\cf0 begin\cf1\b ();\b0\cf0  it \cf1\b !=\b0\cf0  candidatos\cf1\b .\b0\cf0 end\cf1\b ()\b0\cf0  \cf1\b &&\b0\cf0  \cf1\b !\b0\cf0 salir\cf1\b ;\b0\cf0  \cf1\b ++\b0\cf0 it \cf1\b )\{
\par \b0\cf0         \b if\cf1 (\b0\cf0 candidatos\cf1\b .\b0\cf0 begin\cf1\b ()->\b0\cf0 getPadre\cf1\b ()->\b0\cf0 getValor\cf1\b ()\b0\cf0  \cf1\b ==\b0\cf0  it\cf1\b ->\b0\cf0 getValor\cf1\b ())\{
\par \b0\cf0           p \cf1\b =\b0\cf0  it\cf1\b ;
\par \b0\cf0           salir \cf1\b =\b0\cf0  \b true\cf1 ;
\par \b0\cf0         \cf1\b \}
\par \b0\cf0       \cf1\b \}
\par \b0\cf0       \b if\cf1 (\b0\cf0 candidatos\cf1\b .\b0\cf0 begin\cf1\b ()->\b0\cf0 getPadre\cf1\b ()\b0\cf0  \cf1\b !=\b0\cf0  \cf2 0\cf0  \cf1\b )\{
\par \b0\cf0         \b if\cf1 (\b0\cf0 candidatos\cf1\b .\b0\cf0 begin\cf1\b ()->\b0\cf0 getPadre\cf1\b ()->\b0\cf0 getPadre\cf1\b ()\b0\cf0  \cf1\b !=\b0\cf0  \cf2 0\cf1\b )\{
\par \b0\cf0           \b if\cf1 (\b0\cf0 candidatos\cf1\b .\b0\cf0 begin\cf1\b ()->\b0\cf0 getPadre\cf1\b ()->\b0\cf0 getPadre\cf1\b ()->\b0\cf0 getHijos\cf1\b ()\b0\cf0  \cf1\b >\b0\cf0  \cf2 1\cf1\b )\{
\par \b0\cf0             candidatos\cf1\b .\b0\cf0 begin\cf1\b ()->\b0\cf0 getPadre\cf1\b ()->\b0\cf0 getPadre\cf1\b ()->\b0\cf0 eliminarHijo\cf1\b ();
\par \b0\cf0           \cf1\b \}
\par \b0\cf0           \b else\cf1 \{
\par \b0\cf0             salir \cf1\b =\b0\cf0  \b false\cf1 ;
\par \b0\cf0             \b for\cf1 (\b0\cf0  \b auto\b0  it \cf1\b =\b0\cf0  candidatos\cf1\b .\b0\cf0 begin\cf1\b ();\b0\cf0  it \cf1\b !=\b0\cf0  candidatos\cf1\b .\b0\cf0 end\cf1\b ()\b0\cf0  \cf1\b &&\b0\cf0  \cf1\b !\b0\cf0 salir\cf1\b ;\b0\cf0  \cf1\b ++\b0\cf0 it \cf1\b )\{
\par \b0\cf0               \b if\cf1 (\b0\cf0 candidatos\cf1\b .\b0\cf0 begin\cf1\b ()->\b0\cf0 getPadre\cf1\b ()->\b0\cf0 getPadre\cf1\b ()->\b0\cf0 getValor\cf1\b ()\b0\cf0  \cf1\b ==\b0\cf0  it\cf1\b ->\b0\cf0 getValor\cf1\b ())\{
\par \b0\cf0                 ab \cf1\b =\b0\cf0  it\cf1\b ;
\par \b0\cf0                 salir \cf1\b =\b0\cf0  \b true\cf1 ;
\par \b0\cf0               \cf1\b \}
\par \b0\cf0             \cf1\b \}
\par \b0\cf0             candidatos\cf1\b .\b0\cf0 erase\cf1\b (\b0\cf0 ab\cf1\b );
\par \b0\cf0           \cf1\b \}
\par \b0\cf0         \cf1\b \}
\par \b0\cf0       \cf1\b \}
\par \b0\cf0       candidatos\cf1\b .\b0\cf0 erase\cf1\b (\b0\cf0 p\cf1\b );
\par \b0\cf0     \cf1\b \}
\par \b0\cf0     \b else\cf1 \{
\par \b0\cf0       candidatos\cf1\b .\b0\cf0 begin\cf1\b ()->\b0\cf0 getPadre\cf1\b ()->\b0\cf0 eliminarHijo\cf1\b ();
\par \b0\cf0     \cf1\b \}
\par \b0\cf0     candidatos\cf1\b .\b0\cf0 erase\cf1\b (\b0\cf0 candidatos\cf1\b .\b0\cf0 begin\cf1\b ());
\par \b0\cf0     \b int\b0  tam \cf1\b =\b0\cf0  candidatos\cf1\b .\b0\cf0 size\cf1\b ();
\par \b0\cf0     candidatos\cf1\b .\b0\cf0 swap\cf1\b (\b0\cf0 aux\cf1\b );
\par \b0\cf0     candidatos\cf1\b .\b0\cf0 clear\cf1\b ();
\par \b0\cf0     \b for\cf1 (\b0\cf0  \b int\b0  i \cf1\b =\b0\cf0  \cf2 0\cf1\b ;\b0\cf0  i \cf1\b <\b0\cf0  tam\cf1\b ;\b0\cf0  i\cf1\b ++\b0\cf0  \cf1\b )\{
\par \b0\cf0       Nodo n \cf1\b =\b0\cf0  \cf1\b *(\b0\cf0 aux\cf1\b .\b0\cf0 begin\cf1\b ());
\par \b0\cf0       aux\cf1\b .\b0\cf0 erase\cf1\b (\b0\cf0 aux\cf1\b .\b0\cf0 begin\cf1\b ());
\par \b0\cf0       candidatos\cf1\b .\b0\cf0 insert\cf1\b (\b0\cf0 n\cf1\b );
\par \b0\cf0     \cf1\b \}
\par \b0\cf0   \cf1\b \}
\par \b0\cf0   \b if\cf1 (!\b0\cf0 candidatos\cf1\b .\b0\cf0 empty\cf1\b ())\{
\par \b0\cf0   		solucion\cf1\b .\b0\cf0 insert\cf1\b (\b0\cf0 candidatos\cf1\b .\b0\cf0 begin\cf1\b ()->\b0\cf0 getValor\cf1\b ());
\par \b0\cf0   		candidatos\cf1\b .\b0\cf0 erase\cf1\b (\b0\cf0 candidatos\cf1\b .\b0\cf0 begin\cf1\b ());
\par \b0\cf0   \cf1\b \}
\par 
\par }